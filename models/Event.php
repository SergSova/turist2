<?php

    namespace app\models;

    use Yii;
    use yii\helpers\ArrayHelper;
    use yii\web\UploadedFile;

    /**
     * This is the model class for table "tur_event".
     *
     * @property integer       $id
     * @property integer       $event_type_id
     * @property integer       $creator_id
     * @property string        $title
     * @property string        $photo
     * @property string        $desc
     * @property string        $organizators
     * @property string        $particip
     * @property string        $condition
     * @property string        $date_start
     * @property string        $date_end
     * @property string        $date_creation
     * @property string        $status
     * @property integer       $rate
     *
     * @property Coments[]     $coments
     * @property EventType     $eventType
     * @property User          $creator
     * @property ParticEvent[] $particEvents
     */
    class Event extends \yii\db\ActiveRecord{
        const STATUS_ACTIVE   = 'ACTIVE';
        const STATUS_INACTIVE = 'INACTIVE';

        public $imageFiles;
        public $particip_temp;

        /**
         * @inheritdoc
         */
        public static function tableName(){
            return 'tur_event';
        }

        /**
         * @inheritdoc
         */
        public function rules(){
            return [
                [['event_type_id', 'creator_id', 'rate'], 'integer'],
                [['desc', 'particip', 'condition', 'status'], 'string'],
                [['particip_temp', 'date_start', 'organizators', 'date_end', 'date_creation'], 'safe'],
                [['title'], 'string', 'max' => 255],
                [
                    ['event_type_id'],
                    'exist',
                    'skipOnError'     => true,
                    'targetClass'     => EventType::className(),
                    'targetAttribute' => ['event_type_id' => 'id']
                ],
                [['imageFiles'], 'file', 'skipOnEmpty' => true, 'extensions' => 'jpg, jpeg', 'maxFiles' => 4],
                [['creator_id'], 'exist', 'skipOnError' => true, 'targetClass' => User::className(), 'targetAttribute' => ['creator_id' => 'id']],
            ];
        }

        /**
         * @inheritdoc
         */
        public function attributeLabels(){
            return [
                'id'            => 'ID',
                'event_type_id' => 'Тип события',
                'creator_id'    => 'Автор',
                'title'         => 'Название',
                'photo'         => 'Фотографии',
                'desc'          => 'Описание',
                'organizators'  => 'Организаторы',
                'particip'      => 'Должности помошников',
                'condition'     => 'Условия',
                'date_start'    => 'Дата начала',
                'date_end'      => 'Дата оклнчания',
                'date_creation' => 'Дата создания',
                'status'        => 'Статус',
                'rate'          => 'Регйтинг',
            ];
        }

        public function afterFind(){
            $this->organizators = json_decode($this->organizators);
            parent::afterFind(); // TODO: Change the autogenerated stub
        }

        public function beforeSave($insert){
            if($insert){
                $this->creator_id = Yii::$app->user->id;
                $this->date_creation = date('Y-m-d H:i:s');
                $this->status = self::STATUS_INACTIVE;
                $this->rate = 0;
            }
            //            $this->upload();
            $this->organizators = json_encode($this->organizators);

            return parent::beforeSave($insert);
        }


        public function upload(){
            if($this->validate()){
                foreach($this->imageFiles as $file){
                    $file->saveAs('uploads/'.$this->id.'_'.$file->baseName.'.'.$file->extension);
                }

                return true;
            }else{
                return false;
            }
        }

        /**
         * @return \yii\db\ActiveQuery
         */
        public function getComents(){
            return $this->hasMany(Coments::className(), ['event_id' => 'id']);
        }

        /**
         * @return \yii\db\ActiveQuery
         */
        public function getEventType(){
            return $this->hasOne(EventType::className(), ['id' => 'event_type_id']);
        }

        /**
         * @return \yii\db\ActiveQuery
         */
        public function getCreator(){
            return $this->hasOne(User::className(), ['id' => 'creator_id']);
        }

        /**
         * @return \yii\db\ActiveQuery
         */
        public function getParticEvents(){
            return $this->hasMany(ParticEvent::className(), ['event_id' => 'id']);
        }

        public function getAllOrganizators(){
            return ArrayHelper::map(User::find()
                                        ->filterWhere(['not in', 'id', $this->organizators])
                                        ->all(), 'id', 'username');
        }

        public function getOrganizatorsList(){
            $aa = User::findAll($this->organizators);
            $usen = '';
            foreach($aa as $item){
                //todo сделать ссылки на страницы пользователей
                $usen .= $item->username.', ';
            }

            return substr($usen, 0, -2);
        }

        public function getTypes(){
            return ArrayHelper::map(EventType::find()
                                             ->all(), 'id', 'name');
        }

        public function getOrganisatorById($id){
            return User::findOne($id)->username;
        }

        public function getOrganizators(){
            return ArrayHelper::map(User::findAll($this->organizators), 'id', 'username');
        }
    }
